version: '3.8'

services:
  sct.task-manager:
    container_name: sct.task-manager
    build:
      context: ./back
      dockerfile: SCT.TaskManager/Dockerfile
    environment:
      - ASPNETCORE_AppConfig__ConnectionStrings__DefaultConnection=Host=localhost;Port=${DB_PORT};Database=${DB_NAME};Username=${DB_USER};Password=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - KK_PORT=${KK_AUTHORITY_PORT}
      - KK_AUDIENCE=${KK_AUDIENCE}
    ports:
      - "5001:8080"
    networks:
      - mynetwork
    depends_on:
      postgres:
        condition: service_healthy

  sct.users:
    container_name: sct.users
    build:
      context: ./back
      dockerfile: SCT.Users/Dockerfile
    environment:
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - KK_PORT=${KK_AUTHORITY_PORT}
      - KK_AUDIENCE=${KK_AUDIENCE}
    networks:
      - mynetwork
    depends_on:
      postgres:
        condition: service_healthy

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command:
      - start-dev
      - --proxy-headers
      - forwarded
    environment:
      - KEYCLOAK_ADMIN=${KK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KK_ADMIN_PASSWORD}
      - KC_DB=${DB_TYPE}
      - KC_DB_URL=${DB_URL}
      - KC_DB_USERNAME=${DB_USER}
      - KC_DB_PASSWORD=${DB_PASSWORD}
      - KEYCLOAK_FRONTEND_URL=*
      - KEYCLOAK_CORS=true
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./kk_data:/opt/keycloak/data
    networks:
      - mynetwork

  postgres:
    image: postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ./pg_data:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - mynetwork

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - sct.task-manager
      - sct.users
      - keycloak
    networks:
      - mynetwork
  
  react-app:
    container_name: react-app
    build:
      context: ./front/task-force-web  # Путь к папке с вашим React приложением
      dockerfile: DOCKERFILE  # Укажите путь к вашему Dockerfile, если он в другой папке
    ports:
      - "3001:80"  # Прокси-сервер для статики React-приложения будет работать на порту 80 внутри контейнера
    networks:
      - mynetwork
    depends_on:
      - keycloak
      - sct.task-manager  # Если ваш фронтенд зависит от этих сервисов
      - sct.users

networks:
  mynetwork:
    driver: bridge

volumes:
  pg_data:
    driver: local
  kk_data:
    driver: local
